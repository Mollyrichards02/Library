Individual Components
Book Class

Purpose: Manages book information, including title, author, publication year, and loan status.
Key Methods:
createBook(): Prompts the user to add a new book and saves it to a list and the database.
viewAllBooks(): Displays all books in the system.
Attributes: Includes properties like title, author, yearPublished, and a unique bookID.
Librarian Class

Purpose: Represents librarians, managing their information such as name and employee ID.
Key Methods:
createLibrarian(): Allows adding a new librarian and saving their details.
viewAllLibrarians(): Displays a list of all registered librarians.
Attributes: Includes name, employeeID, and a static list to store librarians.
Loan Class

Purpose: Manages book loans, including tracking which books are loaned out and to whom.
Key Methods:
createLoan(): Facilitates the process of creating a loan by selecting a book and a member.
viewAllLoans(): Displays all active loans.
Attributes: Contains details like loanID, bookTitle, memberName, and dueDate.
Member Class

Purpose: Represents library members and manages their information, including name and membership type.
Key Methods:
createMember(): Allows the addition of new members and their details.
viewAllMembers(): Displays a list of all registered members.
Attributes: Includes name, membershipID, and membershipType.
DatabaseConnection Class

Purpose: Handles the connection to the MySQL database.
Key Methods:
getConnection(): Establishes and returns a connection to the database.
Attributes: Contains database connection details like URL, username, and password.
LibraryManagementSystem Class

Purpose: Acts as the main interface for interacting with the library management features.
Key Methods:
displayMenu(): Shows options for the user to interact with the system.
menu(): Handles user input and directs to appropriate actions (like adding books, members, etc.).
Attributes: None specific, but manages interaction with other classes.
Main Class

Purpose: The entry point of the application.
Key Method:
main(): Calls the menu method of the LibraryManagementSystem class to start the application.
Attributes: None.
How They Work Together
Overall Structure: The system is organized into separate classes for books, librarians, loans, and members, which encapsulate related functionality. This modular design enhances maintainability and clarity.
User Interaction: The LibraryManagementSystem class serves as the control center, displaying a menu and directing user actions to the appropriate classes (e.g., creating a book or a member).
Data Management: The DatabaseConnection class facilitates database operations, allowing other classes to save and retrieve data from a central database.
Execution Flow: The Main class starts the application, invoking the LibraryManagementSystem.menu() method, which guides the user through various library operations, ensuring an interactive experience.
Together, these components create a cohesive library management system, allowing users to efficiently manage books, members, loans, and librarians while interacting with a backend database for persistent data storage.
